package shangguigu.foundation;
/*
面向对象的特征一：封装和隐藏
一、问题引入
    当我们创建一个类的对象以后，我们可以通过“对象.属性”的方式，对对象的属性进行赋值。这里，赋值操作要受到
    属性的数据类型和存储范围的制约。除此之外，没有其他制约条件。但是在实际问题中，我们往往需要给属性赋值
    加入额外的限制条件。这个条件就不能在属性声明的时体现，我们只能通过方法进行限制条件的添加。
    --> 此时，针对属性就体现了封装性

二、封装性的体现
    我们将类的属性XXX私有化（private），同时提供公共的（public）方法来获取（getXXX）和设置（setXXX）

拓展：封装性的体现：1）如上；2）不对外暴露的私有方法；3）单例模式(将构造器私有化）; 4) 如果不希望类在包外面调用，可以将类设置为缺省

三、封装性的体现，需要权限修饰符来配合
    1、Java规定的4种权限（从小到大排列）：private、缺省、protected、public
    2、4种权限可以用来修饰类及类的内部结构：属性、方法、构造器、内部类
    3、具体的：4种权限都可以用来修饰类的内部结构：属性、方法、构造器、内部类
        修饰类的话，只能使用：缺省、public

 */
public class AM2Encapsulation {
    private int a;  // 不能直接被调用

    public int getA() {
        return a;
    }

//    对属性的设置
    public void setA(int a) {

        if (a<1){
            this.a = 0;
        }else {
            this.a = a;
        }
    }
}
