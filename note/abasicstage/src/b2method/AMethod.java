package b2method;

/**
 * @author Eva   Email:
 * @Description 方法的使用
 * @data 2023/2/16 15:22
 */
public class AMethod {
    /*
    类中方法的声明和使用

    方法：描述类应该具有的工具
    比如：Math类：squr()\random()
        Scanner类：nextXxx()...
        Arrays类：sort()

    1. 举例:
    public void eat(){}
    public void sleep(int hour){}
    public String getName(){}
    public String getNation(String nation)

    2. 方法的声明：权限修饰符 返回值类型 方法名(形参列表){方法体}

    注意：static、final、abstract 来修饰的方法，后面再说

    3.说明
        3.1 关于权限修饰符：默认方法的权限修饰符先都使用public
            Java规定的4中权限修饰符：private、public、缺省、protected ---> 封装性再细说
        3.2 返回值类型： 有返回值 VS 无返回值
            3.2.1 如果方法有返回值，则必须在方法声明时，指定返回值的类型。同时，方法中，需要使用
                return关键字来返回指定类型的变量或方法：“return 数据”.
                如果方法没有返回值，则方法声明时，使用void来表示。通常，没有返回值的方法中，就不适用return，但是如果使用的话
                只能return; 表示结束此方法的意思
            3.2.2 我们定义方法该不该有返回值？
                题目要求
                凭经验：具体问题具体分析

        3.3 方法名”属性标识符。遵循标识符的规则和规范，“简明知意”

        3.4 形参泪飙：方法可以声明0、1、多个形参
            3.4.1 格式：数据类型1 形参1, 数据类型2 形参2, ...

            3.4.2 我们定义方该不该定义形参？
                题目要求
                凭经验：具体问题具体分析

        3.5 方法体：方法功能的体现
    4. return关键字的使用
        1. 使用范围：使用在方法体中
        2. 作用：1）结束方法
                2）针对于有返回值类型的方法。使用“return 数据” 方法返回所要的数据。
        3. 注意点：return关键字后面不可以声明执行语句

    5. 方法的使用中，可以调用当前类的属性或方法
            特殊的：方法A中又调用了方法A：递归方法
        方法中，不可以定义方法

     */

    public String demo01(int a){
        System.out.println("123");
        return "yes";
    }
}

/*
优点：
    1. 使程序变得更简短而清晰。
    2. 有利于程序维护。
    3. 可以提高程序开发的效率。
    4. 提高了代码的重用性。

命名规则：
    名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。
    下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件
 */