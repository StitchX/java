package d1thread;

/**
 * @author Eva   Email:
 * @Description 理论基础：程序、进程、线程；cpu，单核、多核；多线程特点
 * @data 2023/1/6 14:22
 */
public class AIntroduce {
    /*
    基本概念：程序、进程、线程
    程序program：是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。
    进程process：是程序的一次执行过程，或是正在运行的一个程序。是一个动态的过程：有它
        自身的产生、存在和消亡的过程。--生命周期
        > 如：运行的QQ、运行中的MP3播放器
        > 程序是静态的，进程是动态的
        > 进程作为资源分配的单元，系统在运行时会为每个进程分配不同的内存区域
    线程thread：进程可进一步细化为线程，是一个程序内部的一条执行路径。
        > 若一个进程同一时间并行执行多个线程，就是支持多线程的
        > 线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器（PC），线程切换的开销小
        > 一个进程中的多个线程共享相同的内存单元/内存地址空间->它们从同一堆中分配对象，可以访问相同的遍变量和对象
            这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来安全的隐患。
     */

    /*
    单核CPU和多核CPU
        > 单核CPU其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。
        > 如果是多核的话，才能更好的发挥多线程的效率（现在服务器都是多核的）
        > 一个Java应用程序java.exe，其实至少有三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。
            当然如果发生异常，会影响主线程
     */
    /*

    并行和并发
        > 并行：多个CPU同时执行多个任务。比如：多个人同时做不同事
        > 并发：一个CPU（采用时间片）同时执行多个任务。比如：秒杀
     */
    /*
    多线程的优点
    背景：以单核CPU为例，只使用单个线程先后完成多个任务（调用多个方法），肯定比多个线程来完成用的时间更短，为何
        仍需多线程呢？
        优点：
            1、提交应用程序的响应。对图形化界面更有意义，可增强用户体验
            2、提高计算机系统CPU的利用率
            3、改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和改善

     */

    /*
    何时需要使用多线程
        1、程序需要同时执行两个或多个任务
        2、程序需要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索等
        3、需要一些后台运行的程序时

     */
}
